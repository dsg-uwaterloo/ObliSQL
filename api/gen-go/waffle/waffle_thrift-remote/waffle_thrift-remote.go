// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"waffle"
)

var _ = waffle.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i64 get_client_id()")
  fmt.Fprintln(os.Stderr, "  void register_client_id(i32 block_id, i64 client_id)")
  fmt.Fprintln(os.Stderr, "  void async_get(sequence_id seq_id, string key)")
  fmt.Fprintln(os.Stderr, "  void async_put(sequence_id seq_id, string key, string value)")
  fmt.Fprintln(os.Stderr, "  void async_get_batch(sequence_id seq_id,  keys)")
  fmt.Fprintln(os.Stderr, "  void async_put_batch(sequence_id seq_id,  keys,  values)")
  fmt.Fprintln(os.Stderr, "  string get(string key)")
  fmt.Fprintln(os.Stderr, "  void put(string key, string value)")
  fmt.Fprintln(os.Stderr, "   get_batch( keys)")
  fmt.Fprintln(os.Stderr, "   mix_batch( keys,  values)")
  fmt.Fprintln(os.Stderr, "  void put_batch( keys,  values)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := waffle.NewWaffleThriftClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "get_client_id":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetClientID requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetClientID(context.Background()))
    fmt.Print("\n")
    break
  case "register_client_id":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterClientID requires 2 args")
      flag.Usage()
    }
    tmp0, err37 := (strconv.Atoi(flag.Arg(1)))
    if err37 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1, err38 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err38 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterClientID(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "async_get":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AsyncGet requires 2 args")
      flag.Usage()
    }
    arg39 := flag.Arg(1)
    mbTrans40 := thrift.NewTMemoryBufferLen(len(arg39))
    defer mbTrans40.Close()
    _, err41 := mbTrans40.WriteString(arg39)
    if err41 != nil {
      Usage()
      return
    }
    factory42 := thrift.NewTJSONProtocolFactory()
    jsProt43 := factory42.GetProtocol(mbTrans40)
    argvalue0 := waffle.NewSequenceID()
    err44 := argvalue0.Read(context.Background(), jsProt43)
    if err44 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AsyncGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "async_put":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AsyncPut requires 3 args")
      flag.Usage()
    }
    arg46 := flag.Arg(1)
    mbTrans47 := thrift.NewTMemoryBufferLen(len(arg46))
    defer mbTrans47.Close()
    _, err48 := mbTrans47.WriteString(arg46)
    if err48 != nil {
      Usage()
      return
    }
    factory49 := thrift.NewTJSONProtocolFactory()
    jsProt50 := factory49.GetProtocol(mbTrans47)
    argvalue0 := waffle.NewSequenceID()
    err51 := argvalue0.Read(context.Background(), jsProt50)
    if err51 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AsyncPut(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "async_get_batch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AsyncGetBatch requires 2 args")
      flag.Usage()
    }
    arg54 := flag.Arg(1)
    mbTrans55 := thrift.NewTMemoryBufferLen(len(arg54))
    defer mbTrans55.Close()
    _, err56 := mbTrans55.WriteString(arg54)
    if err56 != nil {
      Usage()
      return
    }
    factory57 := thrift.NewTJSONProtocolFactory()
    jsProt58 := factory57.GetProtocol(mbTrans55)
    argvalue0 := waffle.NewSequenceID()
    err59 := argvalue0.Read(context.Background(), jsProt58)
    if err59 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg60 := flag.Arg(2)
    mbTrans61 := thrift.NewTMemoryBufferLen(len(arg60))
    defer mbTrans61.Close()
    _, err62 := mbTrans61.WriteString(arg60)
    if err62 != nil { 
      Usage()
      return
    }
    factory63 := thrift.NewTJSONProtocolFactory()
    jsProt64 := factory63.GetProtocol(mbTrans61)
    containerStruct1 := waffle.NewWaffleThriftAsyncGetBatchArgs()
    err65 := containerStruct1.ReadField2(context.Background(), jsProt64)
    if err65 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Keys
    value1 := argvalue1
    fmt.Print(client.AsyncGetBatch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "async_put_batch":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AsyncPutBatch requires 3 args")
      flag.Usage()
    }
    arg66 := flag.Arg(1)
    mbTrans67 := thrift.NewTMemoryBufferLen(len(arg66))
    defer mbTrans67.Close()
    _, err68 := mbTrans67.WriteString(arg66)
    if err68 != nil {
      Usage()
      return
    }
    factory69 := thrift.NewTJSONProtocolFactory()
    jsProt70 := factory69.GetProtocol(mbTrans67)
    argvalue0 := waffle.NewSequenceID()
    err71 := argvalue0.Read(context.Background(), jsProt70)
    if err71 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg72 := flag.Arg(2)
    mbTrans73 := thrift.NewTMemoryBufferLen(len(arg72))
    defer mbTrans73.Close()
    _, err74 := mbTrans73.WriteString(arg72)
    if err74 != nil { 
      Usage()
      return
    }
    factory75 := thrift.NewTJSONProtocolFactory()
    jsProt76 := factory75.GetProtocol(mbTrans73)
    containerStruct1 := waffle.NewWaffleThriftAsyncPutBatchArgs()
    err77 := containerStruct1.ReadField2(context.Background(), jsProt76)
    if err77 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Keys
    value1 := argvalue1
    arg78 := flag.Arg(3)
    mbTrans79 := thrift.NewTMemoryBufferLen(len(arg78))
    defer mbTrans79.Close()
    _, err80 := mbTrans79.WriteString(arg78)
    if err80 != nil { 
      Usage()
      return
    }
    factory81 := thrift.NewTJSONProtocolFactory()
    jsProt82 := factory81.GetProtocol(mbTrans79)
    containerStruct2 := waffle.NewWaffleThriftAsyncPutBatchArgs()
    err83 := containerStruct2.ReadField3(context.Background(), jsProt82)
    if err83 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Values
    value2 := argvalue2
    fmt.Print(client.AsyncPutBatch(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Get(context.Background(), value0))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Put requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.Put(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_batch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBatch requires 1 args")
      flag.Usage()
    }
    arg87 := flag.Arg(1)
    mbTrans88 := thrift.NewTMemoryBufferLen(len(arg87))
    defer mbTrans88.Close()
    _, err89 := mbTrans88.WriteString(arg87)
    if err89 != nil { 
      Usage()
      return
    }
    factory90 := thrift.NewTJSONProtocolFactory()
    jsProt91 := factory90.GetProtocol(mbTrans88)
    containerStruct0 := waffle.NewWaffleThriftGetBatchArgs()
    err92 := containerStruct0.ReadField1(context.Background(), jsProt91)
    if err92 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    fmt.Print(client.GetBatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mix_batch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MixBatch requires 2 args")
      flag.Usage()
    }
    arg93 := flag.Arg(1)
    mbTrans94 := thrift.NewTMemoryBufferLen(len(arg93))
    defer mbTrans94.Close()
    _, err95 := mbTrans94.WriteString(arg93)
    if err95 != nil { 
      Usage()
      return
    }
    factory96 := thrift.NewTJSONProtocolFactory()
    jsProt97 := factory96.GetProtocol(mbTrans94)
    containerStruct0 := waffle.NewWaffleThriftMixBatchArgs()
    err98 := containerStruct0.ReadField1(context.Background(), jsProt97)
    if err98 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg99 := flag.Arg(2)
    mbTrans100 := thrift.NewTMemoryBufferLen(len(arg99))
    defer mbTrans100.Close()
    _, err101 := mbTrans100.WriteString(arg99)
    if err101 != nil { 
      Usage()
      return
    }
    factory102 := thrift.NewTJSONProtocolFactory()
    jsProt103 := factory102.GetProtocol(mbTrans100)
    containerStruct1 := waffle.NewWaffleThriftMixBatchArgs()
    err104 := containerStruct1.ReadField2(context.Background(), jsProt103)
    if err104 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Values
    value1 := argvalue1
    fmt.Print(client.MixBatch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "put_batch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutBatch requires 2 args")
      flag.Usage()
    }
    arg105 := flag.Arg(1)
    mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
    defer mbTrans106.Close()
    _, err107 := mbTrans106.WriteString(arg105)
    if err107 != nil { 
      Usage()
      return
    }
    factory108 := thrift.NewTJSONProtocolFactory()
    jsProt109 := factory108.GetProtocol(mbTrans106)
    containerStruct0 := waffle.NewWaffleThriftPutBatchArgs()
    err110 := containerStruct0.ReadField1(context.Background(), jsProt109)
    if err110 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg111 := flag.Arg(2)
    mbTrans112 := thrift.NewTMemoryBufferLen(len(arg111))
    defer mbTrans112.Close()
    _, err113 := mbTrans112.WriteString(arg111)
    if err113 != nil { 
      Usage()
      return
    }
    factory114 := thrift.NewTJSONProtocolFactory()
    jsProt115 := factory114.GetProtocol(mbTrans112)
    containerStruct1 := waffle.NewWaffleThriftPutBatchArgs()
    err116 := containerStruct1.ReadField2(context.Background(), jsProt115)
    if err116 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Values
    value1 := argvalue1
    fmt.Print(client.PutBatch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
