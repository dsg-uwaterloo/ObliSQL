// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"waffle"
)

var _ = waffle.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i64 get_client_id()")
  fmt.Fprintln(os.Stderr, "  void register_client_id(i32 block_id, i64 client_id)")
  fmt.Fprintln(os.Stderr, "  void async_get(sequence_id seq_id, string key)")
  fmt.Fprintln(os.Stderr, "  void async_put(sequence_id seq_id, string key, string value)")
  fmt.Fprintln(os.Stderr, "  void async_get_batch(sequence_id seq_id,  keys)")
  fmt.Fprintln(os.Stderr, "  void async_put_batch(sequence_id seq_id,  keys,  values)")
  fmt.Fprintln(os.Stderr, "  void init_db( keys,  values)")
  fmt.Fprintln(os.Stderr, "  void init_args(i64 B, i64 R, i64 F, i64 D, i64 C, i64 N)")
  fmt.Fprintln(os.Stderr, "  string get(string key)")
  fmt.Fprintln(os.Stderr, "  void put(string key, string value)")
  fmt.Fprintln(os.Stderr, "   get_batch( keys)")
  fmt.Fprintln(os.Stderr, "   mix_batch( keys,  values)")
  fmt.Fprintln(os.Stderr, "  void put_batch( keys,  values)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := waffle.NewWaffleThriftClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "get_client_id":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetClientID requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetClientID(context.Background()))
    fmt.Print("\n")
    break
  case "register_client_id":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterClientID requires 2 args")
      flag.Usage()
    }
    tmp0, err45 := (strconv.Atoi(flag.Arg(1)))
    if err45 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1, err46 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err46 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterClientID(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "async_get":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AsyncGet requires 2 args")
      flag.Usage()
    }
    arg47 := flag.Arg(1)
    mbTrans48 := thrift.NewTMemoryBufferLen(len(arg47))
    defer mbTrans48.Close()
    _, err49 := mbTrans48.WriteString(arg47)
    if err49 != nil {
      Usage()
      return
    }
    factory50 := thrift.NewTJSONProtocolFactory()
    jsProt51 := factory50.GetProtocol(mbTrans48)
    argvalue0 := waffle.NewSequenceID()
    err52 := argvalue0.Read(context.Background(), jsProt51)
    if err52 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AsyncGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "async_put":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AsyncPut requires 3 args")
      flag.Usage()
    }
    arg54 := flag.Arg(1)
    mbTrans55 := thrift.NewTMemoryBufferLen(len(arg54))
    defer mbTrans55.Close()
    _, err56 := mbTrans55.WriteString(arg54)
    if err56 != nil {
      Usage()
      return
    }
    factory57 := thrift.NewTJSONProtocolFactory()
    jsProt58 := factory57.GetProtocol(mbTrans55)
    argvalue0 := waffle.NewSequenceID()
    err59 := argvalue0.Read(context.Background(), jsProt58)
    if err59 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AsyncPut(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "async_get_batch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AsyncGetBatch requires 2 args")
      flag.Usage()
    }
    arg62 := flag.Arg(1)
    mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
    defer mbTrans63.Close()
    _, err64 := mbTrans63.WriteString(arg62)
    if err64 != nil {
      Usage()
      return
    }
    factory65 := thrift.NewTJSONProtocolFactory()
    jsProt66 := factory65.GetProtocol(mbTrans63)
    argvalue0 := waffle.NewSequenceID()
    err67 := argvalue0.Read(context.Background(), jsProt66)
    if err67 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg68 := flag.Arg(2)
    mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
    defer mbTrans69.Close()
    _, err70 := mbTrans69.WriteString(arg68)
    if err70 != nil { 
      Usage()
      return
    }
    factory71 := thrift.NewTJSONProtocolFactory()
    jsProt72 := factory71.GetProtocol(mbTrans69)
    containerStruct1 := waffle.NewWaffleThriftAsyncGetBatchArgs()
    err73 := containerStruct1.ReadField2(context.Background(), jsProt72)
    if err73 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Keys
    value1 := argvalue1
    fmt.Print(client.AsyncGetBatch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "async_put_batch":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AsyncPutBatch requires 3 args")
      flag.Usage()
    }
    arg74 := flag.Arg(1)
    mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
    defer mbTrans75.Close()
    _, err76 := mbTrans75.WriteString(arg74)
    if err76 != nil {
      Usage()
      return
    }
    factory77 := thrift.NewTJSONProtocolFactory()
    jsProt78 := factory77.GetProtocol(mbTrans75)
    argvalue0 := waffle.NewSequenceID()
    err79 := argvalue0.Read(context.Background(), jsProt78)
    if err79 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg80 := flag.Arg(2)
    mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
    defer mbTrans81.Close()
    _, err82 := mbTrans81.WriteString(arg80)
    if err82 != nil { 
      Usage()
      return
    }
    factory83 := thrift.NewTJSONProtocolFactory()
    jsProt84 := factory83.GetProtocol(mbTrans81)
    containerStruct1 := waffle.NewWaffleThriftAsyncPutBatchArgs()
    err85 := containerStruct1.ReadField2(context.Background(), jsProt84)
    if err85 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Keys
    value1 := argvalue1
    arg86 := flag.Arg(3)
    mbTrans87 := thrift.NewTMemoryBufferLen(len(arg86))
    defer mbTrans87.Close()
    _, err88 := mbTrans87.WriteString(arg86)
    if err88 != nil { 
      Usage()
      return
    }
    factory89 := thrift.NewTJSONProtocolFactory()
    jsProt90 := factory89.GetProtocol(mbTrans87)
    containerStruct2 := waffle.NewWaffleThriftAsyncPutBatchArgs()
    err91 := containerStruct2.ReadField3(context.Background(), jsProt90)
    if err91 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Values
    value2 := argvalue2
    fmt.Print(client.AsyncPutBatch(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "init_db":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "InitDb requires 2 args")
      flag.Usage()
    }
    arg92 := flag.Arg(1)
    mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
    defer mbTrans93.Close()
    _, err94 := mbTrans93.WriteString(arg92)
    if err94 != nil { 
      Usage()
      return
    }
    factory95 := thrift.NewTJSONProtocolFactory()
    jsProt96 := factory95.GetProtocol(mbTrans93)
    containerStruct0 := waffle.NewWaffleThriftInitDbArgs()
    err97 := containerStruct0.ReadField1(context.Background(), jsProt96)
    if err97 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg98 := flag.Arg(2)
    mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
    defer mbTrans99.Close()
    _, err100 := mbTrans99.WriteString(arg98)
    if err100 != nil { 
      Usage()
      return
    }
    factory101 := thrift.NewTJSONProtocolFactory()
    jsProt102 := factory101.GetProtocol(mbTrans99)
    containerStruct1 := waffle.NewWaffleThriftInitDbArgs()
    err103 := containerStruct1.ReadField2(context.Background(), jsProt102)
    if err103 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Values
    value1 := argvalue1
    fmt.Print(client.InitDb(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "init_args":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "InitArgs_ requires 6 args")
      flag.Usage()
    }
    argvalue0, err104 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err104 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err105 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err105 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err106 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err106 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err107 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err107 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err108 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err108 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5, err109 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err109 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.InitArgs_(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Get(context.Background(), value0))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Put requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.Put(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_batch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBatch requires 1 args")
      flag.Usage()
    }
    arg113 := flag.Arg(1)
    mbTrans114 := thrift.NewTMemoryBufferLen(len(arg113))
    defer mbTrans114.Close()
    _, err115 := mbTrans114.WriteString(arg113)
    if err115 != nil { 
      Usage()
      return
    }
    factory116 := thrift.NewTJSONProtocolFactory()
    jsProt117 := factory116.GetProtocol(mbTrans114)
    containerStruct0 := waffle.NewWaffleThriftGetBatchArgs()
    err118 := containerStruct0.ReadField1(context.Background(), jsProt117)
    if err118 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    fmt.Print(client.GetBatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mix_batch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MixBatch requires 2 args")
      flag.Usage()
    }
    arg119 := flag.Arg(1)
    mbTrans120 := thrift.NewTMemoryBufferLen(len(arg119))
    defer mbTrans120.Close()
    _, err121 := mbTrans120.WriteString(arg119)
    if err121 != nil { 
      Usage()
      return
    }
    factory122 := thrift.NewTJSONProtocolFactory()
    jsProt123 := factory122.GetProtocol(mbTrans120)
    containerStruct0 := waffle.NewWaffleThriftMixBatchArgs()
    err124 := containerStruct0.ReadField1(context.Background(), jsProt123)
    if err124 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg125 := flag.Arg(2)
    mbTrans126 := thrift.NewTMemoryBufferLen(len(arg125))
    defer mbTrans126.Close()
    _, err127 := mbTrans126.WriteString(arg125)
    if err127 != nil { 
      Usage()
      return
    }
    factory128 := thrift.NewTJSONProtocolFactory()
    jsProt129 := factory128.GetProtocol(mbTrans126)
    containerStruct1 := waffle.NewWaffleThriftMixBatchArgs()
    err130 := containerStruct1.ReadField2(context.Background(), jsProt129)
    if err130 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Values
    value1 := argvalue1
    fmt.Print(client.MixBatch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "put_batch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutBatch requires 2 args")
      flag.Usage()
    }
    arg131 := flag.Arg(1)
    mbTrans132 := thrift.NewTMemoryBufferLen(len(arg131))
    defer mbTrans132.Close()
    _, err133 := mbTrans132.WriteString(arg131)
    if err133 != nil { 
      Usage()
      return
    }
    factory134 := thrift.NewTJSONProtocolFactory()
    jsProt135 := factory134.GetProtocol(mbTrans132)
    containerStruct0 := waffle.NewWaffleThriftPutBatchArgs()
    err136 := containerStruct0.ReadField1(context.Background(), jsProt135)
    if err136 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg137 := flag.Arg(2)
    mbTrans138 := thrift.NewTMemoryBufferLen(len(arg137))
    defer mbTrans138.Close()
    _, err139 := mbTrans138.WriteString(arg137)
    if err139 != nil { 
      Usage()
      return
    }
    factory140 := thrift.NewTJSONProtocolFactory()
    jsProt141 := factory140.GetProtocol(mbTrans138)
    containerStruct1 := waffle.NewWaffleThriftPutBatchArgs()
    err142 := containerStruct1.ReadField2(context.Background(), jsProt141)
    if err142 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Values
    value1 := argvalue1
    fmt.Print(client.PutBatch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
