// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package waffle

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - ClientID
//  - ClientSeqNo
//  - ServerSeqNo
type SequenceID struct {
  ClientID int64 `thrift:"client_id,1,required" db:"client_id" json:"client_id"`
  ClientSeqNo int64 `thrift:"client_seq_no,2,required" db:"client_seq_no" json:"client_seq_no"`
  ServerSeqNo int64 `thrift:"server_seq_no,3,required" db:"server_seq_no" json:"server_seq_no"`
}

func NewSequenceID() *SequenceID {
  return &SequenceID{}
}


func (p *SequenceID) GetClientID() int64 {
  return p.ClientID
}

func (p *SequenceID) GetClientSeqNo() int64 {
  return p.ClientSeqNo
}

func (p *SequenceID) GetServerSeqNo() int64 {
  return p.ServerSeqNo
}
func (p *SequenceID) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetClientID bool = false;
  var issetClientSeqNo bool = false;
  var issetServerSeqNo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetClientID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetClientSeqNo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetServerSeqNo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetClientID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClientID is not set"));
  }
  if !issetClientSeqNo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClientSeqNo is not set"));
  }
  if !issetServerSeqNo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerSeqNo is not set"));
  }
  return nil
}

func (p *SequenceID)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientID = v
}
  return nil
}

func (p *SequenceID)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientSeqNo = v
}
  return nil
}

func (p *SequenceID)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ServerSeqNo = v
}
  return nil
}

func (p *SequenceID) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sequence_id"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SequenceID) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClientID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client_id: ", p), err) }
  return err
}

func (p *SequenceID) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_seq_no", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:client_seq_no: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClientSeqNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_seq_no (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:client_seq_no: ", p), err) }
  return err
}

func (p *SequenceID) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server_seq_no", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:server_seq_no: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ServerSeqNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server_seq_no (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:server_seq_no: ", p), err) }
  return err
}

func (p *SequenceID) Equals(other *SequenceID) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ClientID != other.ClientID { return false }
  if p.ClientSeqNo != other.ClientSeqNo { return false }
  if p.ServerSeqNo != other.ServerSeqNo { return false }
  return true
}

func (p *SequenceID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SequenceID(%+v)", *p)
}

func (p *SequenceID) Validate() error {
  return nil
}
type WaffleThrift interface {
  GetClientID(ctx context.Context) (_r int64, _err error)
  // Parameters:
  //  - BlockID
  //  - ClientID
  RegisterClientID(ctx context.Context, block_id int32, client_id int64) (_err error)
  // Parameters:
  //  - SeqID
  //  - Key
  AsyncGet(ctx context.Context, seq_id *SequenceID, key string) (_err error)
  // Parameters:
  //  - SeqID
  //  - Key
  //  - Value
  AsyncPut(ctx context.Context, seq_id *SequenceID, key string, value string) (_err error)
  // Parameters:
  //  - SeqID
  //  - Keys
  AsyncGetBatch(ctx context.Context, seq_id *SequenceID, keys []string) (_err error)
  // Parameters:
  //  - SeqID
  //  - Keys
  //  - Values
  AsyncPutBatch(ctx context.Context, seq_id *SequenceID, keys []string, values []string) (_err error)
  // Parameters:
  //  - Keys
  //  - Values
  InitDb(ctx context.Context, keys []string, values []string) (_err error)
  // Parameters:
  //  - B
  //  - R
  //  - F
  //  - D
  //  - C
  //  - N
  InitArgs_(ctx context.Context, B int64, R int64, F int64, D int64, C int64, N int64) (_err error)
  // Parameters:
  //  - Key
  Get(ctx context.Context, key string) (_r string, _err error)
  // Parameters:
  //  - Key
  //  - Value
  Put(ctx context.Context, key string, value string) (_err error)
  // Parameters:
  //  - Keys
  GetBatch(ctx context.Context, keys []string) (_r []string, _err error)
  // Parameters:
  //  - Keys
  //  - Values
  MixBatch(ctx context.Context, keys []string, values []string) (_r []string, _err error)
  // Parameters:
  //  - Keys
  //  - Values
  PutBatch(ctx context.Context, keys []string, values []string) (_err error)
}

type WaffleThriftClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewWaffleThriftClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WaffleThriftClient {
  return &WaffleThriftClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewWaffleThriftClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WaffleThriftClient {
  return &WaffleThriftClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewWaffleThriftClient(c thrift.TClient) *WaffleThriftClient {
  return &WaffleThriftClient{
    c: c,
  }
}

func (p *WaffleThriftClient) Client_() thrift.TClient {
  return p.c
}

func (p *WaffleThriftClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *WaffleThriftClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

func (p *WaffleThriftClient) GetClientID(ctx context.Context) (_r int64, _err error) {
  var _args0 WaffleThriftGetClientIDArgs
  var _result2 WaffleThriftGetClientIDResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "get_client_id", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - BlockID
//  - ClientID
func (p *WaffleThriftClient) RegisterClientID(ctx context.Context, block_id int32, client_id int64) (_err error) {
  var _args3 WaffleThriftRegisterClientIDArgs
  _args3.BlockID = block_id
  _args3.ClientID = client_id
  var _result5 WaffleThriftRegisterClientIDResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "register_client_id", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - SeqID
//  - Key
func (p *WaffleThriftClient) AsyncGet(ctx context.Context, seq_id *SequenceID, key string) (_err error) {
  var _args6 WaffleThriftAsyncGetArgs
  _args6.SeqID = seq_id
  _args6.Key = key
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "async_get", &_args6, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - SeqID
//  - Key
//  - Value
func (p *WaffleThriftClient) AsyncPut(ctx context.Context, seq_id *SequenceID, key string, value string) (_err error) {
  var _args7 WaffleThriftAsyncPutArgs
  _args7.SeqID = seq_id
  _args7.Key = key
  _args7.Value = value
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "async_put", &_args7, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - SeqID
//  - Keys
func (p *WaffleThriftClient) AsyncGetBatch(ctx context.Context, seq_id *SequenceID, keys []string) (_err error) {
  var _args8 WaffleThriftAsyncGetBatchArgs
  _args8.SeqID = seq_id
  _args8.Keys = keys
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "async_get_batch", &_args8, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - SeqID
//  - Keys
//  - Values
func (p *WaffleThriftClient) AsyncPutBatch(ctx context.Context, seq_id *SequenceID, keys []string, values []string) (_err error) {
  var _args9 WaffleThriftAsyncPutBatchArgs
  _args9.SeqID = seq_id
  _args9.Keys = keys
  _args9.Values = values
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "async_put_batch", &_args9, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Keys
//  - Values
func (p *WaffleThriftClient) InitDb(ctx context.Context, keys []string, values []string) (_err error) {
  var _args10 WaffleThriftInitDbArgs
  _args10.Keys = keys
  _args10.Values = values
  var _result12 WaffleThriftInitDbResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "init_db", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - B
//  - R
//  - F
//  - D
//  - C
//  - N
func (p *WaffleThriftClient) InitArgs_(ctx context.Context, B int64, R int64, F int64, D int64, C int64, N int64) (_err error) {
  var _args13 WaffleThriftInitArgsArgs
  _args13.B = B
  _args13.R = R
  _args13.F = F
  _args13.D = D
  _args13.C = C
  _args13.N = N
  var _result15 WaffleThriftInitArgsResult
  var _meta14 thrift.ResponseMeta
  _meta14, _err = p.Client_().Call(ctx, "init_args", &_args13, &_result15)
  p.SetLastResponseMeta_(_meta14)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Key
func (p *WaffleThriftClient) Get(ctx context.Context, key string) (_r string, _err error) {
  var _args16 WaffleThriftGetArgs
  _args16.Key = key
  var _result18 WaffleThriftGetResult
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "get", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  return _result18.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Value
func (p *WaffleThriftClient) Put(ctx context.Context, key string, value string) (_err error) {
  var _args19 WaffleThriftPutArgs
  _args19.Key = key
  _args19.Value = value
  var _result21 WaffleThriftPutResult
  var _meta20 thrift.ResponseMeta
  _meta20, _err = p.Client_().Call(ctx, "put", &_args19, &_result21)
  p.SetLastResponseMeta_(_meta20)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Keys
func (p *WaffleThriftClient) GetBatch(ctx context.Context, keys []string) (_r []string, _err error) {
  var _args22 WaffleThriftGetBatchArgs
  _args22.Keys = keys
  var _result24 WaffleThriftGetBatchResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "get_batch", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

// Parameters:
//  - Keys
//  - Values
func (p *WaffleThriftClient) MixBatch(ctx context.Context, keys []string, values []string) (_r []string, _err error) {
  var _args25 WaffleThriftMixBatchArgs
  _args25.Keys = keys
  _args25.Values = values
  var _result27 WaffleThriftMixBatchResult
  var _meta26 thrift.ResponseMeta
  _meta26, _err = p.Client_().Call(ctx, "mix_batch", &_args25, &_result27)
  p.SetLastResponseMeta_(_meta26)
  if _err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - Keys
//  - Values
func (p *WaffleThriftClient) PutBatch(ctx context.Context, keys []string, values []string) (_err error) {
  var _args28 WaffleThriftPutBatchArgs
  _args28.Keys = keys
  _args28.Values = values
  var _result30 WaffleThriftPutBatchResult
  var _meta29 thrift.ResponseMeta
  _meta29, _err = p.Client_().Call(ctx, "put_batch", &_args28, &_result30)
  p.SetLastResponseMeta_(_meta29)
  if _err != nil {
    return
  }
  return nil
}

type WaffleThriftProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler WaffleThrift
}

func (p *WaffleThriftProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *WaffleThriftProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *WaffleThriftProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewWaffleThriftProcessor(handler WaffleThrift) *WaffleThriftProcessor {

  self31 := &WaffleThriftProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self31.processorMap["get_client_id"] = &waffleThriftProcessorGetClientID{handler:handler}
  self31.processorMap["register_client_id"] = &waffleThriftProcessorRegisterClientID{handler:handler}
  self31.processorMap["async_get"] = &waffleThriftProcessorAsyncGet{handler:handler}
  self31.processorMap["async_put"] = &waffleThriftProcessorAsyncPut{handler:handler}
  self31.processorMap["async_get_batch"] = &waffleThriftProcessorAsyncGetBatch{handler:handler}
  self31.processorMap["async_put_batch"] = &waffleThriftProcessorAsyncPutBatch{handler:handler}
  self31.processorMap["init_db"] = &waffleThriftProcessorInitDb{handler:handler}
  self31.processorMap["init_args"] = &waffleThriftProcessorInitArgs_{handler:handler}
  self31.processorMap["get"] = &waffleThriftProcessorGet{handler:handler}
  self31.processorMap["put"] = &waffleThriftProcessorPut{handler:handler}
  self31.processorMap["get_batch"] = &waffleThriftProcessorGetBatch{handler:handler}
  self31.processorMap["mix_batch"] = &waffleThriftProcessorMixBatch{handler:handler}
  self31.processorMap["put_batch"] = &waffleThriftProcessorPutBatch{handler:handler}
return self31
}

func (p *WaffleThriftProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x32 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x32.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x32

}

type waffleThriftProcessorGetClientID struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorGetClientID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err33 error
  args := WaffleThriftGetClientIDArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_client_id", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftGetClientIDResult{}
  if retval, err2 := p.handler.GetClientID(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc34 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_client_id: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "get_client_id", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err33 = thrift.WrapTException(err2)
    }
    if err2 := _exc34.Write(ctx, oprot); _write_err33 == nil && err2 != nil {
      _write_err33 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err33 == nil && err2 != nil {
      _write_err33 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err33 == nil && err2 != nil {
      _write_err33 = thrift.WrapTException(err2)
    }
    if _write_err33 != nil {
      return false, thrift.WrapTException(_write_err33)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get_client_id", thrift.REPLY, seqId); err2 != nil {
    _write_err33 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err33 == nil && err2 != nil {
    _write_err33 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err33 == nil && err2 != nil {
    _write_err33 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err33 == nil && err2 != nil {
    _write_err33 = thrift.WrapTException(err2)
  }
  if _write_err33 != nil {
    return false, thrift.WrapTException(_write_err33)
  }
  return true, err
}

type waffleThriftProcessorRegisterClientID struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorRegisterClientID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err35 error
  args := WaffleThriftRegisterClientIDArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "register_client_id", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftRegisterClientIDResult{}
  if err2 := p.handler.RegisterClientID(ctx, args.BlockID, args.ClientID); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc36 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_client_id: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "register_client_id", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err35 = thrift.WrapTException(err2)
    }
    if err2 := _exc36.Write(ctx, oprot); _write_err35 == nil && err2 != nil {
      _write_err35 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err35 == nil && err2 != nil {
      _write_err35 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err35 == nil && err2 != nil {
      _write_err35 = thrift.WrapTException(err2)
    }
    if _write_err35 != nil {
      return false, thrift.WrapTException(_write_err35)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "register_client_id", thrift.REPLY, seqId); err2 != nil {
    _write_err35 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err35 == nil && err2 != nil {
    _write_err35 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err35 == nil && err2 != nil {
    _write_err35 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err35 == nil && err2 != nil {
    _write_err35 = thrift.WrapTException(err2)
  }
  if _write_err35 != nil {
    return false, thrift.WrapTException(_write_err35)
  }
  return true, err
}

type waffleThriftProcessorAsyncGet struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorAsyncGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaffleThriftAsyncGetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.AsyncGet(ctx, args.SeqID, args.Key); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type waffleThriftProcessorAsyncPut struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorAsyncPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaffleThriftAsyncPutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.AsyncPut(ctx, args.SeqID, args.Key, args.Value); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type waffleThriftProcessorAsyncGetBatch struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorAsyncGetBatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaffleThriftAsyncGetBatchArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.AsyncGetBatch(ctx, args.SeqID, args.Keys); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type waffleThriftProcessorAsyncPutBatch struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorAsyncPutBatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaffleThriftAsyncPutBatchArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.AsyncPutBatch(ctx, args.SeqID, args.Keys, args.Values); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type waffleThriftProcessorInitDb struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorInitDb) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err37 error
  args := WaffleThriftInitDbArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "init_db", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftInitDbResult{}
  if err2 := p.handler.InitDb(ctx, args.Keys, args.Values); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc38 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing init_db: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "init_db", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err37 = thrift.WrapTException(err2)
    }
    if err2 := _exc38.Write(ctx, oprot); _write_err37 == nil && err2 != nil {
      _write_err37 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err37 == nil && err2 != nil {
      _write_err37 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err37 == nil && err2 != nil {
      _write_err37 = thrift.WrapTException(err2)
    }
    if _write_err37 != nil {
      return false, thrift.WrapTException(_write_err37)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "init_db", thrift.REPLY, seqId); err2 != nil {
    _write_err37 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err37 == nil && err2 != nil {
    _write_err37 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err37 == nil && err2 != nil {
    _write_err37 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err37 == nil && err2 != nil {
    _write_err37 = thrift.WrapTException(err2)
  }
  if _write_err37 != nil {
    return false, thrift.WrapTException(_write_err37)
  }
  return true, err
}

type waffleThriftProcessorInitArgs_ struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorInitArgs_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err39 error
  args := WaffleThriftInitArgsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "init_args", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftInitArgsResult{}
  if err2 := p.handler.InitArgs_(ctx, args.B, args.R, args.F, args.D, args.C, args.N); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc40 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing init_args: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "init_args", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if err2 := _exc40.Write(ctx, oprot); _write_err39 == nil && err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err39 == nil && err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err39 == nil && err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if _write_err39 != nil {
      return false, thrift.WrapTException(_write_err39)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "init_args", thrift.REPLY, seqId); err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err39 == nil && err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err39 == nil && err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err39 == nil && err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if _write_err39 != nil {
    return false, thrift.WrapTException(_write_err39)
  }
  return true, err
}

type waffleThriftProcessorGet struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err41 error
  args := WaffleThriftGetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftGetResult{}
  if retval, err2 := p.handler.Get(ctx, args.Key); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc42 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if err2 := _exc42.Write(ctx, oprot); _write_err41 == nil && err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err41 == nil && err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err41 == nil && err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if _write_err41 != nil {
      return false, thrift.WrapTException(_write_err41)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get", thrift.REPLY, seqId); err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err41 == nil && err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err41 == nil && err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err41 == nil && err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if _write_err41 != nil {
    return false, thrift.WrapTException(_write_err41)
  }
  return true, err
}

type waffleThriftProcessorPut struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err43 error
  args := WaffleThriftPutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftPutResult{}
  if err2 := p.handler.Put(ctx, args.Key, args.Value); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc44 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if err2 := _exc44.Write(ctx, oprot); _write_err43 == nil && err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err43 == nil && err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err43 == nil && err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if _write_err43 != nil {
      return false, thrift.WrapTException(_write_err43)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "put", thrift.REPLY, seqId); err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err43 == nil && err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err43 == nil && err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err43 == nil && err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if _write_err43 != nil {
    return false, thrift.WrapTException(_write_err43)
  }
  return true, err
}

type waffleThriftProcessorGetBatch struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorGetBatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err45 error
  args := WaffleThriftGetBatchArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_batch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftGetBatchResult{}
  if retval, err2 := p.handler.GetBatch(ctx, args.Keys); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc46 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_batch: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "get_batch", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if err2 := _exc46.Write(ctx, oprot); _write_err45 == nil && err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err45 == nil && err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err45 == nil && err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if _write_err45 != nil {
      return false, thrift.WrapTException(_write_err45)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get_batch", thrift.REPLY, seqId); err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err45 == nil && err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err45 == nil && err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err45 == nil && err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if _write_err45 != nil {
    return false, thrift.WrapTException(_write_err45)
  }
  return true, err
}

type waffleThriftProcessorMixBatch struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorMixBatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err47 error
  args := WaffleThriftMixBatchArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "mix_batch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftMixBatchResult{}
  if retval, err2 := p.handler.MixBatch(ctx, args.Keys, args.Values); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc48 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mix_batch: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "mix_batch", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if err2 := _exc48.Write(ctx, oprot); _write_err47 == nil && err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err47 == nil && err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err47 == nil && err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if _write_err47 != nil {
      return false, thrift.WrapTException(_write_err47)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "mix_batch", thrift.REPLY, seqId); err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err47 == nil && err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err47 == nil && err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err47 == nil && err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if _write_err47 != nil {
    return false, thrift.WrapTException(_write_err47)
  }
  return true, err
}

type waffleThriftProcessorPutBatch struct {
  handler WaffleThrift
}

func (p *waffleThriftProcessorPutBatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err49 error
  args := WaffleThriftPutBatchArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "put_batch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := WaffleThriftPutBatchResult{}
  if err2 := p.handler.PutBatch(ctx, args.Keys, args.Values); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc50 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put_batch: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "put_batch", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if err2 := _exc50.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if _write_err49 != nil {
      return false, thrift.WrapTException(_write_err49)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "put_batch", thrift.REPLY, seqId); err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if _write_err49 != nil {
    return false, thrift.WrapTException(_write_err49)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type WaffleThriftGetClientIDArgs struct {
}

func NewWaffleThriftGetClientIDArgs() *WaffleThriftGetClientIDArgs {
  return &WaffleThriftGetClientIDArgs{}
}

func (p *WaffleThriftGetClientIDArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftGetClientIDArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_client_id_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftGetClientIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftGetClientIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaffleThriftGetClientIDResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaffleThriftGetClientIDResult() *WaffleThriftGetClientIDResult {
  return &WaffleThriftGetClientIDResult{}
}

var WaffleThriftGetClientIDResult_Success_DEFAULT int64
func (p *WaffleThriftGetClientIDResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return WaffleThriftGetClientIDResult_Success_DEFAULT
  }
return *p.Success
}
func (p *WaffleThriftGetClientIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaffleThriftGetClientIDResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftGetClientIDResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WaffleThriftGetClientIDResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_client_id_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftGetClientIDResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaffleThriftGetClientIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftGetClientIDResult(%+v)", *p)
}

// Attributes:
//  - BlockID
//  - ClientID
type WaffleThriftRegisterClientIDArgs struct {
  BlockID int32 `thrift:"block_id,1" db:"block_id" json:"block_id"`
  ClientID int64 `thrift:"client_id,2" db:"client_id" json:"client_id"`
}

func NewWaffleThriftRegisterClientIDArgs() *WaffleThriftRegisterClientIDArgs {
  return &WaffleThriftRegisterClientIDArgs{}
}


func (p *WaffleThriftRegisterClientIDArgs) GetBlockID() int32 {
  return p.BlockID
}

func (p *WaffleThriftRegisterClientIDArgs) GetClientID() int64 {
  return p.ClientID
}
func (p *WaffleThriftRegisterClientIDArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftRegisterClientIDArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BlockID = v
}
  return nil
}

func (p *WaffleThriftRegisterClientIDArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientID = v
}
  return nil
}

func (p *WaffleThriftRegisterClientIDArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_client_id_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftRegisterClientIDArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "block_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:block_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BlockID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.block_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:block_id: ", p), err) }
  return err
}

func (p *WaffleThriftRegisterClientIDArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:client_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClientID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:client_id: ", p), err) }
  return err
}

func (p *WaffleThriftRegisterClientIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftRegisterClientIDArgs(%+v)", *p)
}

type WaffleThriftRegisterClientIDResult struct {
}

func NewWaffleThriftRegisterClientIDResult() *WaffleThriftRegisterClientIDResult {
  return &WaffleThriftRegisterClientIDResult{}
}

func (p *WaffleThriftRegisterClientIDResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftRegisterClientIDResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "register_client_id_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftRegisterClientIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftRegisterClientIDResult(%+v)", *p)
}

// Attributes:
//  - SeqID
//  - Key
type WaffleThriftAsyncGetArgs struct {
  SeqID *SequenceID `thrift:"seq_id,1" db:"seq_id" json:"seq_id"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewWaffleThriftAsyncGetArgs() *WaffleThriftAsyncGetArgs {
  return &WaffleThriftAsyncGetArgs{}
}

var WaffleThriftAsyncGetArgs_SeqID_DEFAULT *SequenceID
func (p *WaffleThriftAsyncGetArgs) GetSeqID() *SequenceID {
  if !p.IsSetSeqID() {
    return WaffleThriftAsyncGetArgs_SeqID_DEFAULT
  }
return p.SeqID
}

func (p *WaffleThriftAsyncGetArgs) GetKey() string {
  return p.Key
}
func (p *WaffleThriftAsyncGetArgs) IsSetSeqID() bool {
  return p.SeqID != nil
}

func (p *WaffleThriftAsyncGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftAsyncGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqID = &SequenceID{}
  if err := p.SeqID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqID), err)
  }
  return nil
}

func (p *WaffleThriftAsyncGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *WaffleThriftAsyncGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "async_get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftAsyncGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq_id: ", p), err) }
  if err := p.SeqID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq_id: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftAsyncGetArgs(%+v)", *p)
}

// Attributes:
//  - SeqID
//  - Key
//  - Value
type WaffleThriftAsyncPutArgs struct {
  SeqID *SequenceID `thrift:"seq_id,1" db:"seq_id" json:"seq_id"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewWaffleThriftAsyncPutArgs() *WaffleThriftAsyncPutArgs {
  return &WaffleThriftAsyncPutArgs{}
}

var WaffleThriftAsyncPutArgs_SeqID_DEFAULT *SequenceID
func (p *WaffleThriftAsyncPutArgs) GetSeqID() *SequenceID {
  if !p.IsSetSeqID() {
    return WaffleThriftAsyncPutArgs_SeqID_DEFAULT
  }
return p.SeqID
}

func (p *WaffleThriftAsyncPutArgs) GetKey() string {
  return p.Key
}

func (p *WaffleThriftAsyncPutArgs) GetValue() string {
  return p.Value
}
func (p *WaffleThriftAsyncPutArgs) IsSetSeqID() bool {
  return p.SeqID != nil
}

func (p *WaffleThriftAsyncPutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftAsyncPutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqID = &SequenceID{}
  if err := p.SeqID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqID), err)
  }
  return nil
}

func (p *WaffleThriftAsyncPutArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *WaffleThriftAsyncPutArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *WaffleThriftAsyncPutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "async_put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftAsyncPutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq_id: ", p), err) }
  if err := p.SeqID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq_id: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncPutArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncPutArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftAsyncPutArgs(%+v)", *p)
}

// Attributes:
//  - SeqID
//  - Keys
type WaffleThriftAsyncGetBatchArgs struct {
  SeqID *SequenceID `thrift:"seq_id,1" db:"seq_id" json:"seq_id"`
  Keys []string `thrift:"keys,2" db:"keys" json:"keys"`
}

func NewWaffleThriftAsyncGetBatchArgs() *WaffleThriftAsyncGetBatchArgs {
  return &WaffleThriftAsyncGetBatchArgs{}
}

var WaffleThriftAsyncGetBatchArgs_SeqID_DEFAULT *SequenceID
func (p *WaffleThriftAsyncGetBatchArgs) GetSeqID() *SequenceID {
  if !p.IsSetSeqID() {
    return WaffleThriftAsyncGetBatchArgs_SeqID_DEFAULT
  }
return p.SeqID
}

func (p *WaffleThriftAsyncGetBatchArgs) GetKeys() []string {
  return p.Keys
}
func (p *WaffleThriftAsyncGetBatchArgs) IsSetSeqID() bool {
  return p.SeqID != nil
}

func (p *WaffleThriftAsyncGetBatchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftAsyncGetBatchArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqID = &SequenceID{}
  if err := p.SeqID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqID), err)
  }
  return nil
}

func (p *WaffleThriftAsyncGetBatchArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem51 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem51 = v
}
    p.Keys = append(p.Keys, _elem51)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftAsyncGetBatchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "async_get_batch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftAsyncGetBatchArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq_id: ", p), err) }
  if err := p.SeqID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq_id: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncGetBatchArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncGetBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftAsyncGetBatchArgs(%+v)", *p)
}

// Attributes:
//  - SeqID
//  - Keys
//  - Values
type WaffleThriftAsyncPutBatchArgs struct {
  SeqID *SequenceID `thrift:"seq_id,1" db:"seq_id" json:"seq_id"`
  Keys []string `thrift:"keys,2" db:"keys" json:"keys"`
  Values []string `thrift:"values,3" db:"values" json:"values"`
}

func NewWaffleThriftAsyncPutBatchArgs() *WaffleThriftAsyncPutBatchArgs {
  return &WaffleThriftAsyncPutBatchArgs{}
}

var WaffleThriftAsyncPutBatchArgs_SeqID_DEFAULT *SequenceID
func (p *WaffleThriftAsyncPutBatchArgs) GetSeqID() *SequenceID {
  if !p.IsSetSeqID() {
    return WaffleThriftAsyncPutBatchArgs_SeqID_DEFAULT
  }
return p.SeqID
}

func (p *WaffleThriftAsyncPutBatchArgs) GetKeys() []string {
  return p.Keys
}

func (p *WaffleThriftAsyncPutBatchArgs) GetValues() []string {
  return p.Values
}
func (p *WaffleThriftAsyncPutBatchArgs) IsSetSeqID() bool {
  return p.SeqID != nil
}

func (p *WaffleThriftAsyncPutBatchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftAsyncPutBatchArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqID = &SequenceID{}
  if err := p.SeqID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqID), err)
  }
  return nil
}

func (p *WaffleThriftAsyncPutBatchArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem52 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem52 = v
}
    p.Keys = append(p.Keys, _elem52)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftAsyncPutBatchArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem53 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem53 = v
}
    p.Values = append(p.Values, _elem53)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftAsyncPutBatchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "async_put_batch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftAsyncPutBatchArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq_id: ", p), err) }
  if err := p.SeqID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq_id: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncPutBatchArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncPutBatchArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *WaffleThriftAsyncPutBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftAsyncPutBatchArgs(%+v)", *p)
}

// Attributes:
//  - Keys
//  - Values
type WaffleThriftInitDbArgs struct {
  Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
  Values []string `thrift:"values,2" db:"values" json:"values"`
}

func NewWaffleThriftInitDbArgs() *WaffleThriftInitDbArgs {
  return &WaffleThriftInitDbArgs{}
}


func (p *WaffleThriftInitDbArgs) GetKeys() []string {
  return p.Keys
}

func (p *WaffleThriftInitDbArgs) GetValues() []string {
  return p.Values
}
func (p *WaffleThriftInitDbArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftInitDbArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem54 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem54 = v
}
    p.Keys = append(p.Keys, _elem54)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftInitDbArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem55 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem55 = v
}
    p.Values = append(p.Values, _elem55)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftInitDbArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "init_db_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftInitDbArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *WaffleThriftInitDbArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err) }
  return err
}

func (p *WaffleThriftInitDbArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftInitDbArgs(%+v)", *p)
}

type WaffleThriftInitDbResult struct {
}

func NewWaffleThriftInitDbResult() *WaffleThriftInitDbResult {
  return &WaffleThriftInitDbResult{}
}

func (p *WaffleThriftInitDbResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftInitDbResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "init_db_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftInitDbResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftInitDbResult(%+v)", *p)
}

// Attributes:
//  - B
//  - R
//  - F
//  - D
//  - C
//  - N
type WaffleThriftInitArgsArgs struct {
  B int64 `thrift:"B,1" db:"B" json:"B"`
  R int64 `thrift:"R,2" db:"R" json:"R"`
  F int64 `thrift:"F,3" db:"F" json:"F"`
  D int64 `thrift:"D,4" db:"D" json:"D"`
  C int64 `thrift:"C,5" db:"C" json:"C"`
  N int64 `thrift:"N,6" db:"N" json:"N"`
}

func NewWaffleThriftInitArgsArgs() *WaffleThriftInitArgsArgs {
  return &WaffleThriftInitArgsArgs{}
}


func (p *WaffleThriftInitArgsArgs) GetB() int64 {
  return p.B
}

func (p *WaffleThriftInitArgsArgs) GetR() int64 {
  return p.R
}

func (p *WaffleThriftInitArgsArgs) GetF() int64 {
  return p.F
}

func (p *WaffleThriftInitArgsArgs) GetD() int64 {
  return p.D
}

func (p *WaffleThriftInitArgsArgs) GetC() int64 {
  return p.C
}

func (p *WaffleThriftInitArgsArgs) GetN() int64 {
  return p.N
}
func (p *WaffleThriftInitArgsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftInitArgsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.B = v
}
  return nil
}

func (p *WaffleThriftInitArgsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.R = v
}
  return nil
}

func (p *WaffleThriftInitArgsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.F = v
}
  return nil
}

func (p *WaffleThriftInitArgsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.D = v
}
  return nil
}

func (p *WaffleThriftInitArgsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.C = v
}
  return nil
}

func (p *WaffleThriftInitArgsArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.N = v
}
  return nil
}

func (p *WaffleThriftInitArgsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "init_args_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftInitArgsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "B", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:B: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.B (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:B: ", p), err) }
  return err
}

func (p *WaffleThriftInitArgsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "R", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:R: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.R)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.R (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:R: ", p), err) }
  return err
}

func (p *WaffleThriftInitArgsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "F", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:F: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.F)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.F (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:F: ", p), err) }
  return err
}

func (p *WaffleThriftInitArgsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "D", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:D: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.D)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.D (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:D: ", p), err) }
  return err
}

func (p *WaffleThriftInitArgsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "C", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:C: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.C)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.C (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:C: ", p), err) }
  return err
}

func (p *WaffleThriftInitArgsArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "N", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:N: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.N)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.N (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:N: ", p), err) }
  return err
}

func (p *WaffleThriftInitArgsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftInitArgsArgs(%+v)", *p)
}

type WaffleThriftInitArgsResult struct {
}

func NewWaffleThriftInitArgsResult() *WaffleThriftInitArgsResult {
  return &WaffleThriftInitArgsResult{}
}

func (p *WaffleThriftInitArgsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftInitArgsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "init_args_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftInitArgsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftInitArgsResult(%+v)", *p)
}

// Attributes:
//  - Key
type WaffleThriftGetArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewWaffleThriftGetArgs() *WaffleThriftGetArgs {
  return &WaffleThriftGetArgs{}
}


func (p *WaffleThriftGetArgs) GetKey() string {
  return p.Key
}
func (p *WaffleThriftGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *WaffleThriftGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *WaffleThriftGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaffleThriftGetResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaffleThriftGetResult() *WaffleThriftGetResult {
  return &WaffleThriftGetResult{}
}

var WaffleThriftGetResult_Success_DEFAULT string
func (p *WaffleThriftGetResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return WaffleThriftGetResult_Success_DEFAULT
  }
return *p.Success
}
func (p *WaffleThriftGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaffleThriftGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WaffleThriftGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaffleThriftGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftGetResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type WaffleThriftPutArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewWaffleThriftPutArgs() *WaffleThriftPutArgs {
  return &WaffleThriftPutArgs{}
}


func (p *WaffleThriftPutArgs) GetKey() string {
  return p.Key
}

func (p *WaffleThriftPutArgs) GetValue() string {
  return p.Value
}
func (p *WaffleThriftPutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftPutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *WaffleThriftPutArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *WaffleThriftPutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftPutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *WaffleThriftPutArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *WaffleThriftPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftPutArgs(%+v)", *p)
}

type WaffleThriftPutResult struct {
}

func NewWaffleThriftPutResult() *WaffleThriftPutResult {
  return &WaffleThriftPutResult{}
}

func (p *WaffleThriftPutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftPutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftPutResult(%+v)", *p)
}

// Attributes:
//  - Keys
type WaffleThriftGetBatchArgs struct {
  Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewWaffleThriftGetBatchArgs() *WaffleThriftGetBatchArgs {
  return &WaffleThriftGetBatchArgs{}
}


func (p *WaffleThriftGetBatchArgs) GetKeys() []string {
  return p.Keys
}
func (p *WaffleThriftGetBatchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftGetBatchArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem56 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem56 = v
}
    p.Keys = append(p.Keys, _elem56)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftGetBatchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_batch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftGetBatchArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *WaffleThriftGetBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftGetBatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaffleThriftGetBatchResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaffleThriftGetBatchResult() *WaffleThriftGetBatchResult {
  return &WaffleThriftGetBatchResult{}
}

var WaffleThriftGetBatchResult_Success_DEFAULT []string

func (p *WaffleThriftGetBatchResult) GetSuccess() []string {
  return p.Success
}
func (p *WaffleThriftGetBatchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaffleThriftGetBatchResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftGetBatchResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem57 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem57 = v
}
    p.Success = append(p.Success, _elem57)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftGetBatchResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_batch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftGetBatchResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaffleThriftGetBatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftGetBatchResult(%+v)", *p)
}

// Attributes:
//  - Keys
//  - Values
type WaffleThriftMixBatchArgs struct {
  Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
  Values []string `thrift:"values,2" db:"values" json:"values"`
}

func NewWaffleThriftMixBatchArgs() *WaffleThriftMixBatchArgs {
  return &WaffleThriftMixBatchArgs{}
}


func (p *WaffleThriftMixBatchArgs) GetKeys() []string {
  return p.Keys
}

func (p *WaffleThriftMixBatchArgs) GetValues() []string {
  return p.Values
}
func (p *WaffleThriftMixBatchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftMixBatchArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem58 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem58 = v
}
    p.Keys = append(p.Keys, _elem58)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftMixBatchArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem59 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem59 = v
}
    p.Values = append(p.Values, _elem59)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftMixBatchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mix_batch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftMixBatchArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *WaffleThriftMixBatchArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err) }
  return err
}

func (p *WaffleThriftMixBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftMixBatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type WaffleThriftMixBatchResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewWaffleThriftMixBatchResult() *WaffleThriftMixBatchResult {
  return &WaffleThriftMixBatchResult{}
}

var WaffleThriftMixBatchResult_Success_DEFAULT []string

func (p *WaffleThriftMixBatchResult) GetSuccess() []string {
  return p.Success
}
func (p *WaffleThriftMixBatchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WaffleThriftMixBatchResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftMixBatchResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem60 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem60 = v
}
    p.Success = append(p.Success, _elem60)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftMixBatchResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mix_batch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftMixBatchResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WaffleThriftMixBatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftMixBatchResult(%+v)", *p)
}

// Attributes:
//  - Keys
//  - Values
type WaffleThriftPutBatchArgs struct {
  Keys []string `thrift:"keys,1" db:"keys" json:"keys"`
  Values []string `thrift:"values,2" db:"values" json:"values"`
}

func NewWaffleThriftPutBatchArgs() *WaffleThriftPutBatchArgs {
  return &WaffleThriftPutBatchArgs{}
}


func (p *WaffleThriftPutBatchArgs) GetKeys() []string {
  return p.Keys
}

func (p *WaffleThriftPutBatchArgs) GetValues() []string {
  return p.Values
}
func (p *WaffleThriftPutBatchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftPutBatchArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem61 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem61 = v
}
    p.Keys = append(p.Keys, _elem61)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftPutBatchArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem62 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem62 = v
}
    p.Values = append(p.Values, _elem62)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftPutBatchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_batch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftPutBatchArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err) }
  return err
}

func (p *WaffleThriftPutBatchArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err) }
  return err
}

func (p *WaffleThriftPutBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftPutBatchArgs(%+v)", *p)
}

type WaffleThriftPutBatchResult struct {
}

func NewWaffleThriftPutBatchResult() *WaffleThriftPutBatchResult {
  return &WaffleThriftPutBatchResult{}
}

func (p *WaffleThriftPutBatchResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftPutBatchResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_batch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftPutBatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftPutBatchResult(%+v)", *p)
}


type WaffleThriftResponse interface {
  // Parameters:
  //  - SeqID
  //  - OpCode
  //  - Result_
  AsyncResponse(ctx context.Context, seq_id *SequenceID, op_code int32, result []string) (_err error)
}

type WaffleThriftResponseClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewWaffleThriftResponseClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WaffleThriftResponseClient {
  return &WaffleThriftResponseClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewWaffleThriftResponseClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WaffleThriftResponseClient {
  return &WaffleThriftResponseClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewWaffleThriftResponseClient(c thrift.TClient) *WaffleThriftResponseClient {
  return &WaffleThriftResponseClient{
    c: c,
  }
}

func (p *WaffleThriftResponseClient) Client_() thrift.TClient {
  return p.c
}

func (p *WaffleThriftResponseClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *WaffleThriftResponseClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - SeqID
//  - OpCode
//  - Result_
func (p *WaffleThriftResponseClient) AsyncResponse(ctx context.Context, seq_id *SequenceID, op_code int32, result []string) (_err error) {
  var _args161 WaffleThriftResponseAsyncResponseArgs
  _args161.SeqID = seq_id
  _args161.OpCode = op_code
  _args161.Result_ = result
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "async_response", &_args161, nil); err != nil {
    return err
  }
  return nil
}

type WaffleThriftResponseProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler WaffleThriftResponse
}

func (p *WaffleThriftResponseProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *WaffleThriftResponseProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *WaffleThriftResponseProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewWaffleThriftResponseProcessor(handler WaffleThriftResponse) *WaffleThriftResponseProcessor {

  self162 := &WaffleThriftResponseProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self162.processorMap["async_response"] = &waffleThriftResponseProcessorAsyncResponse{handler:handler}
return self162
}

func (p *WaffleThriftResponseProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x163 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x163.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x163

}

type waffleThriftResponseProcessorAsyncResponse struct {
  handler WaffleThriftResponse
}

func (p *waffleThriftResponseProcessorAsyncResponse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WaffleThriftResponseAsyncResponseArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.AsyncResponse(ctx, args.SeqID, args.OpCode, args.Result_); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - SeqID
//  - OpCode
//  - Result_
type WaffleThriftResponseAsyncResponseArgs struct {
  SeqID *SequenceID `thrift:"seq_id,1" db:"seq_id" json:"seq_id"`
  OpCode int32 `thrift:"op_code,2" db:"op_code" json:"op_code"`
  Result_ []string `thrift:"result,3" db:"result" json:"result"`
}

func NewWaffleThriftResponseAsyncResponseArgs() *WaffleThriftResponseAsyncResponseArgs {
  return &WaffleThriftResponseAsyncResponseArgs{}
}

var WaffleThriftResponseAsyncResponseArgs_SeqID_DEFAULT *SequenceID
func (p *WaffleThriftResponseAsyncResponseArgs) GetSeqID() *SequenceID {
  if !p.IsSetSeqID() {
    return WaffleThriftResponseAsyncResponseArgs_SeqID_DEFAULT
  }
return p.SeqID
}

func (p *WaffleThriftResponseAsyncResponseArgs) GetOpCode() int32 {
  return p.OpCode
}

func (p *WaffleThriftResponseAsyncResponseArgs) GetResult_() []string {
  return p.Result_
}
func (p *WaffleThriftResponseAsyncResponseArgs) IsSetSeqID() bool {
  return p.SeqID != nil
}

func (p *WaffleThriftResponseAsyncResponseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaffleThriftResponseAsyncResponseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.SeqID = &SequenceID{}
  if err := p.SeqID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SeqID), err)
  }
  return nil
}

func (p *WaffleThriftResponseAsyncResponseArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OpCode = v
}
  return nil
}

func (p *WaffleThriftResponseAsyncResponseArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Result_ =  tSlice
  for i := 0; i < size; i ++ {
var _elem164 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem164 = v
}
    p.Result_ = append(p.Result_, _elem164)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WaffleThriftResponseAsyncResponseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "async_response_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaffleThriftResponseAsyncResponseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq_id: ", p), err) }
  if err := p.SeqID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SeqID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq_id: ", p), err) }
  return err
}

func (p *WaffleThriftResponseAsyncResponseArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "op_code", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OpCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op_code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op_code: ", p), err) }
  return err
}

func (p *WaffleThriftResponseAsyncResponseArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Result_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Result_ {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *WaffleThriftResponseAsyncResponseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaffleThriftResponseAsyncResponseArgs(%+v)", *p)
}


