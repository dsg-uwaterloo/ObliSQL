// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: redis.proto

package redis_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RedisService_Put_FullMethodName         = "/redis_service.RedisService/Put"
	RedisService_Get_FullMethodName         = "/redis_service.RedisService/Get"
	RedisService_PutBatch_FullMethodName    = "/redis_service.RedisService/PutBatch"
	RedisService_GetBatch_FullMethodName    = "/redis_service.RedisService/GetBatch"
	RedisService_DeleteBatch_FullMethodName = "/redis_service.RedisService/DeleteBatch"
)

// RedisServiceClient is the client API for RedisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the gRPC service
type RedisServiceClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	PutBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Empty, error)
	GetBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	DeleteBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Empty, error)
}

type redisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisServiceClient(cc grpc.ClientConnInterface) RedisServiceClient {
	return &redisServiceClient{cc}
}

func (c *redisServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RedisService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, RedisService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) PutBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RedisService_PutBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) GetBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, RedisService_GetBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) DeleteBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RedisService_DeleteBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisServiceServer is the server API for RedisService service.
// All implementations must embed UnimplementedRedisServiceServer
// for forward compatibility
//
// Define the gRPC service
type RedisServiceServer interface {
	Put(context.Context, *PutRequest) (*Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	PutBatch(context.Context, *BatchRequest) (*Empty, error)
	GetBatch(context.Context, *BatchRequest) (*BatchResponse, error)
	DeleteBatch(context.Context, *BatchRequest) (*Empty, error)
	mustEmbedUnimplementedRedisServiceServer()
}

// UnimplementedRedisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRedisServiceServer struct {
}

func (UnimplementedRedisServiceServer) Put(context.Context, *PutRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedRedisServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRedisServiceServer) PutBatch(context.Context, *BatchRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBatch not implemented")
}
func (UnimplementedRedisServiceServer) GetBatch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedRedisServiceServer) DeleteBatch(context.Context, *BatchRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatch not implemented")
}
func (UnimplementedRedisServiceServer) mustEmbedUnimplementedRedisServiceServer() {}

// UnsafeRedisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisServiceServer will
// result in compilation errors.
type UnsafeRedisServiceServer interface {
	mustEmbedUnimplementedRedisServiceServer()
}

func RegisterRedisServiceServer(s grpc.ServiceRegistrar, srv RedisServiceServer) {
	s.RegisterService(&RedisService_ServiceDesc, srv)
}

func _RedisService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_PutBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).PutBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisService_PutBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).PutBatch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisService_GetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).GetBatch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_DeleteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).DeleteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisService_DeleteBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).DeleteBatch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisService_ServiceDesc is the grpc.ServiceDesc for RedisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redis_service.RedisService",
	HandlerType: (*RedisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _RedisService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RedisService_Get_Handler,
		},
		{
			MethodName: "PutBatch",
			Handler:    _RedisService_PutBatch_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _RedisService_GetBatch_Handler,
		},
		{
			MethodName: "DeleteBatch",
			Handler:    _RedisService_DeleteBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis.proto",
}
